# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö WebRegLog –¥–ª—è Windows
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\scripts\run-init-db.ps1

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
$ErrorActionPreference = "Stop"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message, [string]$Color = "Green")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor $Color
}

function Write-Warning {
    param([string]$Message)
    Write-Log "WARNING: $Message" "Yellow"
}

function Write-Error {
    param([string]$Message)
    Write-Log "ERROR: $Message" "Red"
}

Write-Log "üîê –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö WebRegLog"
Write-Log "============================================="
Write-Log ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è backend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if (-not (Test-Path "backend")) {
    Write-Error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞."
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è package.json
if (-not (Test-Path "backend/package.json")) {
    Write-Error "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ backend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è node_modules
if (-not (Test-Path "backend/node_modules")) {
    Write-Warning "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    try {
        Set-Location "backend"
        npm install
        Set-Location ".."
        Write-Log "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    } catch {
        Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
        exit 1
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if (-not (Test-Path "backend/dist")) {
    Write-Warning "Backend –Ω–µ —Å–æ–±—Ä–∞–Ω. –°–æ–±–∏—Ä–∞–µ–º..."
    try {
        Set-Location "backend"
        npm run build
        Set-Location ".."
        Write-Log "‚úÖ Backend —Å–æ–±—Ä–∞–Ω"
    } catch {
        Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ backend"
        exit 1
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ MongoDB
Write-Log "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º MongoDB..."
try {
    $mongodbStatus = docker-compose ps mongodb 2>$null | Select-String "Up"
    if (-not $mongodbStatus) {
        Write-Warning "MongoDB –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º..."
        docker-compose up -d mongodb
        Start-Sleep -Seconds 15
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    docker-compose exec -T mongodb mongosh --eval "db.adminCommand('ping')" 2>$null | Out-Null
    Write-Log "‚úÖ MongoDB –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
} catch {
    Write-Error "‚ùå MongoDB –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ .\scripts\init-database.ps1"
    exit 1
}

Write-Log ""
Write-Log "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
Write-Log ""

# –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
try {
    Set-Location "backend"
    npm run init-db
    Set-Location ".."
} catch {
    Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    exit 1
}

Write-Log ""
Write-Log "üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
Write-Log ""
Write-Log "üìã –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:"
Write-Log "   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: .\start-windows.bat"
Write-Log "   2. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ backend: docker-compose up -d"
Write-Log ""
Write-Log "üîê –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
Write-Log "üåê Frontend: http://localhost:3001"
