# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–æ–≤ MongoDB –¥–ª—è Windows
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\scripts\backup.ps1

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
$ErrorActionPreference = "Stop"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message, [string]$Color = "Green")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor $Color
}

function Write-Warning {
    param([string]$Message)
    Write-Log "WARNING: $Message" "Yellow"
}

function Write-Error {
    param([string]$Message)
    Write-Log "ERROR: $Message" "Red"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
$BackupDir = ".\docker\mongodb\backup"
$Timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$BackupName = "webreglog_backup_$Timestamp"
$RetentionDays = 7

Write-Log "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ MongoDB..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
    Write-Error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω –ª–∏ MongoDB –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
try {
    $mongodbStatus = docker-compose ps mongodb 2>$null | Select-String "Up"
    if (-not $mongodbStatus) {
        Write-Error "MongoDB –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ docker-compose up -d"
        exit 1
    }
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ MongoDB –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    exit 1
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
if (-not (Test-Path $BackupDir)) {
    New-Item -ItemType Directory -Force -Path $BackupDir | Out-Null
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
Write-Log "–°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
try {
    docker-compose exec -T mongodb mongodump --db webreglog --out "/backup/$BackupName" --gzip
    Write-Log "‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: $BackupName"
} catch {
    Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞"
    exit 1
}

# –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
Write-Log "–ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –±—ç–∫–∞–ø..."
try {
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell Compress-Archive –≤–º–µ—Å—Ç–æ tar
    $backupPath = Join-Path $BackupDir $BackupName
    $archivePath = Join-Path $BackupDir "$BackupName.zip"
    
    Compress-Archive -Path $backupPath -DestinationPath $archivePath -Force
    
    Write-Log "‚úÖ –ë—ç–∫–∞–ø –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: $BackupName.zip"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Remove-Item -Path $backupPath -Recurse -Force
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
    Write-Log "–£–¥–∞–ª—è–µ–º –±—ç–∫–∞–ø—ã —Å—Ç–∞—Ä—à–µ $RetentionDays –¥–Ω–µ–π..."
    $cutoffDate = (Get-Date).AddDays(-$RetentionDays)
    Get-ChildItem -Path $BackupDir -Filter "webreglog_backup_*.zip" | 
        Where-Object { $_.LastWriteTime -lt $cutoffDate } | 
        Remove-Item -Force
    
    $archiveSize = (Get-Item $archivePath).Length
    $sizeInMB = [math]::Round($archiveSize / 1MB, 2)
    
    Write-Log "üéâ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    Write-Log "–§–∞–π–ª: $archivePath"
    Write-Log "–†–∞–∑–º–µ—Ä: $sizeInMB MB"
    
} catch {
    Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞"
    exit 1
}
